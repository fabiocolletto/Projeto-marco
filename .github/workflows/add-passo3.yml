name: Assistente Ceremonial — Adicionar Tela 3
on: { workflow_dispatch: {} }

jobs:
  add-passo3:
    runs-on: ubuntu-latest
    permissions: { contents: write }
    steps:
      - uses: actions/checkout@v4

      - name: Ensure dirs
        run: mkdir -p assistentes/assistente-ceremonial/src/lib

      - name: Write programacao.html (Tela 3)
        run: |
          cat > assistentes/assistente-ceremonial/programacao.html << 'EOF'
          <!doctype html><html lang="pt-BR"><head>
            <meta charset="utf-8"/><meta name="viewport" content="width=device-width, initial-scale=1"/>
            <title>Assistente Ceremonial — Etapa 3</title>
          </head><body>
            <main id="passo3" class="pm-wrap">
              <header class="pm-header">
                <h1 class="pm-title">Programação de Mensagens</h1>
                <p class="pm-sub">Etapa 3 de 3 · Mensagens</p>
                <nav class="pm-steps" aria-label="Passos">
                  <span class="pm-step">1. Evento</span>
                  <span class="pm-step">2. Lista</span>
                  <span class="pm-step is-current">3. Mensagens</span>
                </nav>
              </header>

              <section class="pm-card" style="margin:14px 0">
                <strong>Resumo do Evento</strong>
                <div id="s3Etiqueta" class="pm-etiqueta" style="margin-top:8px"></div>
              </section>

              <section class="pm-card">
                <div style="display:flex;justify-content:space-between;align-items:center;gap:8px;flex-wrap:wrap">
                  <div>
                    <strong>Tipos de mensagem</strong>
                    <div class="pm-hint">Marque os tipos, ative variáveis e escolha 1 dos 6 modelos.</div>
                  </div>
                  <div class="pm-inline-actions">
                    <span class="pm-step" id="kpiTipos">Tipos: 0</span>
                    <span class="pm-step" id="kpiModelos">Modelos: 0</span>
                  </div>
                </div>
                <div class="pm-actions" style="margin-top:10px;flex-wrap:wrap">
                  <label class="pm-step"><input type="checkbox" class="chk-tipo" value="save_the_date"> Save the date</label>
                  <label class="pm-step"><input type="checkbox" class="chk-tipo" value="convite"> Convite</label>
                  <label class="pm-step"><input type="checkbox" class="chk-tipo" value="rsvp"> RSVP</label>
                  <label class="pm-step"><input type="checkbox" class="chk-tipo" value="lembrete_vespera"> Lembrete véspera</label>
                  <label class="pm-step"><input type="checkbox" class="chk-tipo" value="agradecimento"> Agradecimento</label>
                </div>
              </section>

              <section id="s3PainelTipos" class="pm-grid" style="gap:14px"></section>

              <section class="pm-card">
                <div style="display:flex;justify-content:space-between;align-items:center;gap:8px;flex-wrap:wrap">
                  <strong>Prévia automática</strong>
                  <div class="pm-inline-actions">
                    <button id="btnCopyAuto" class="pm-btn pm-btn-ghost">Copiar</button>
                    <button id="btnResumo" class="pm-btn pm-btn-primary">Resumo</button>
                  </div>
                </div>
                <pre id="autoPreview" class="pm-pre" style="margin-top:8px">Selecione ao menos um tipo.</pre>
              </section>
            </main>

            <dialog id="modalCopy" class="pm-modal" aria-labelledby="modalCopyTitle">
              <h3 id="modalCopyTitle">Cópia manual</h3>
              <p>Seu ambiente bloqueou o acesso à área de transferência. Selecione ou baixe .txt.</p>
              <textarea id="modalCopyText" readonly></textarea>
              <div class="pm-actions">
                <button id="btnSelect" class="pm-btn pm-btn-primary">Selecionar texto</button>
                <button id="btnDownloadTxt" class="pm-btn pm-btn-ghost">Baixar .txt</button>
                <button id="btnCloseModal" class="pm-btn">Fechar</button>
              </div>
            </dialog>

            <script type="module" src="./src/passo3.js"></script>
          </body></html>
          EOF

      - name: Write libs (templates + utils)
        run: |
          cat > assistentes/assistente-ceremonial/src/lib/utils.js << 'EOF'
          export const fmtDataBr = iso => !iso ? '' : iso.split('-').reverse().join('/');
          export function downloadAsTxt(text, filename='mensagem.txt'){
            const blob=new Blob([text],{type:'text/plain'}); const url=URL.createObjectURL(blob);
            const a=document.createElement('a'); a.href=url; a.download=filename; document.body.appendChild(a); a.click();
            setTimeout(()=>{URL.revokeObjectURL(url); a.remove();},0);
          }
          export async function safeCopyText(text, btn){
            try{ if(window.isSecureContext && navigator.clipboard?.writeText){ await navigator.clipboard.writeText(text); flash(btn,'Copiado!'); return {ok:true,mode:'clipboard'}; } }catch(_){}
            try{ const ta=document.createElement('textarea'); ta.value=text; ta.setAttribute('readonly',''); ta.style.position='fixed'; ta.style.top='-1000px'; document.body.appendChild(ta); ta.select(); const ok=document.execCommand('copy'); ta.remove(); if(ok){ flash(btn,'Copiado!'); return {ok:true,mode:'execCommand'}; } }catch(_){}
            openCopyModal(text); flash(btn,'Copie manualmente'); return {ok:false,mode:'manual'};
          }
          const flash=(btn,msg)=>{ if(!btn) return; const o=btn.textContent; btn.textContent=msg; setTimeout(()=>btn.textContent=o,1200); };
          export function openCopyModal(text){ const d=document.getElementById('modalCopy'); const ta=document.getElementById('modalCopyText'); ta.value=text||''; (d.showModal?.() ?? d.setAttribute('open','')); setTimeout(()=>{ ta.removeAttribute('readonly'); ta.focus(); ta.select(); ta.setAttribute('readonly',''); },0); }
          export function closeCopyModal(){ const d=document.getElementById('modalCopy'); (d.close?.() ?? d.removeAttribute('open')); }
          EOF

          cat > assistentes/assistente-ceremonial/src/lib/templates.js << 'EOF'
          import { fmtDataBr } from './utils.js';
          export const TYPES = {
            save_the_date:{label:'Save the date'},
            convite:{label:'Convite'},
            rsvp:{label:'Confirmação de presença (RSVP)'},
            lembrete_vespera:{label:'Lembrete véspera'},
            agradecimento:{label:'Agradecimento pós-evento'}
          };
          export function gerarModelos(tipo, vars, evento, convidado='Convidado'){
            const p = {
              guest: vars.guest ? convidado : null,
              nomeEvento: vars.nomeEvento ? (evento?.nome||null) : null,
              data: vars.data ? (evento?.data ? fmtDataBr(evento.data) : null) : null,
              hora: vars.hora ? (evento?.hora||null) : null,
              local: vars.local ? (evento?.local||null) : null,
              endereco: vars.endereco ? (evento?.endereco||null) : null
            };
            const quando = [ p.data && p.hora ? `${p.data} às ${p.hora}` : p.data || p.hora || null,
                             p.data && p.hora ? `no dia ${p.data}, às ${p.hora}` : null,
                             p.data ? `em ${p.data}` : null ].filter(Boolean);
            const S=(...arr)=>arr.filter(Boolean).join(' ').replace(/\s{2,}/g,' ').trim();
            const base = {
              oi1: p.guest? `Olá, ${p.guest}!` : `Olá!`,
              oi2: p.guest? `${p.guest}, tudo bem?` : `Temos novidades!`,
              ab1: p.nomeEvento? `Você é nosso convidado para ${p.nomeEvento}.` : `Temos um convite especial.`,
              ab2: p.nomeEvento? `${p.nomeEvento} está chegando!` : `Vem coisa boa por aí!`,
              loc: (p.local && p.endereco)? `No ${p.local} (${p.endereco}).` : (p.local? `No ${p.local}.` : (p.endereco? `${p.endereco}.` : ``)),
              q1: quando[0]? `Será ${quando[0]}.` : `Em breve.`,
              q2: quando[1] || quando[0] || `Detalhes em breve.`
            };
            const CTA = {
              save_the_date:[`Guarde a data!`,`Marque na agenda!`,`Reserve este dia!`],
              convite:[`Esperamos você!`,`Contamos com sua presença!`,`Vai ser incrível!`],
              rsvp:[`Pode confirmar presença por aqui?`,`Clique para confirmar presença.`,`Responda com "SIM" para confirmar.`],
              lembrete_vespera:[`Até amanhã!`,`Nos vemos lá!`,`Qualquer dúvida, fale com a gente.`],
              agradecimento:[`Obrigado por fazer parte!`,`Foi especial ter você com a gente.`,`Até a próxima!`]
            };
            const out=[];
            const push=t=>out.push(S(t));
            switch(tipo){
              case 'save_the_date':
                push([base.oi1, base.ab2, base.q1, base.loc, CTA.save_the_date[0]]);
                push([base.oi2, base.ab1, base.q2, CTA.save_the_date[1]]);
                push([base.ab1, base.loc, base.q1, CTA.save_the_date[2]]);
                push([base.ab2, base.q1, CTA.save_the_date[1]]);
                push([base.oi1, base.q2, base.loc, CTA.save_the_date[0]]);
                push([base.oi2, base.ab2, CTA.save_the_date[2]]);
                break;
              case 'convite':
                push([base.oi1, base.ab1, base.q1, base.loc, CTA.convite[0]]);
                push([base.oi2, base.ab2, base.loc, base.q2, CTA.convite[1]]);
                push([base.ab1, base.q1, CTA.convite[2]]);
                push([base.ab2, base.loc, CTA.convite[1]]);
                push([base.oi1, base.loc, base.q2, CTA.convite[0]]);
                push([base.oi2, base.ab1, CTA.convite[2]]);
                break;
              case 'rsvp':
                push([base.oi1, base.ab1, base.q1, base.loc, CTA.rsvp[0]]);
                push([base.ab2, base.q2, CTA.rsvp[1]]);
                push([base.oi2, base.ab1, CTA.rsvp[2]]);
                push([base.ab1, base.loc, CTA.rsvp[1]]);
                push([base.oi1, base.q1, CTA.rsvp[2]]);
                push([base.ab2, base.loc, CTA.rsvp[0]]);
                break;
              case 'lembrete_vespera':
                push([base.oi1, `É amanhã!`, base.q1, base.loc, CTA.lembrete_vespera[0]]);
                push([`Falta pouco para`, p.nomeEvento? p.nomeEvento+`.` : `o evento.`, base.q1, CTA.lembrete_vespera[2]]);
                push([base.oi2, `Nos encontramos`, base.q2, CTA.lembrete_vespera[1]]);
                push([base.ab2, base.loc, CTA.lembrete_vespera[2]]);
                push([`Lembrete:`, base.q1, base.loc]);
                push([base.oi1, `Prepare-se!`, base.q2]);
                break;
              case 'agradecimento':
                push([base.oi1, CTA.agradecimento[0]]);
                push([base.oi2, CTA.agradecimento[1]]);
                push([`Em nome de`, p.nomeEvento || 'todos nós', `,`, CTA.agradecimento[2]]);
                push([`Sua presença fez a diferença.`, CTA.agradecimento[0]]);
                push([`Até breve!`, CTA.agradecimento[1]]);
                push([base.oi1, `Conte conosco sempre!`]);
                break;
            }
            while(out.length<6) out.push('');
            return out.slice(0,6);
          }
          EOF

      - name: Write passo3.js
        run: |
          cat > assistentes/assistente-ceremonial/src/passo3.js << 'EOF'
          import { TYPES, gerarModelos } from './lib/templates.js';
          import { fmtDataBr, downloadAsTxt, safeCopyText, openCopyModal, closeCopyModal } from './lib/utils.js';
          const STORAGE_KEYS={ evento:'pm_evento_v1', lista:'lista_v1' };
          const $=(s,el=document)=>el.querySelector(s); const $$=(s,el=document)=>Array.from(el.querySelectorAll(s));
          const state={ evento:{nome:'',data:'',hora:'',local:'',endereco:'',anfitriao:''}, tiposSelecionados:new Set(), variaveisPorTipo:{}, modelosEscolhidos:{}, agendaPorTipo:{}, amostraNome:'', lista:[] };
          function loadEvento(){ try{ const raw=localStorage.getItem(STORAGE_KEYS.evento); if(raw) Object.assign(state.evento, JSON.parse(raw)||{});}catch(_){}} 
          function renderEtiqueta(){ const e=state.evento; $('#s3Etiqueta').innerHTML = `
            <div class="pm-eti-header"><div class="pm-eti-title">${e.nome||'—'}</div><div class="pm-eti-chip">${e.data?fmtDataBr(e.data):'Data a definir'} ${e.hora||''}</div></div>
            <div class="pm-eti-grid">
              <div class="pm-eti-item"><span class="pm-eti-label">Local</span><div class="pm-eti-value">${e.local||'—'}</div></div>
              <div class="pm-eti-item"><span class="pm-eti-label">Endereço</span><div class="pm-eti-value">${e.endereco||'—'}</div></div>
              <div class="pm-eti-item"><span class="pm-eti-label">Contato</span><div class="pm-eti-value">${e.anfitriao||'—'}</div></div>
            </div>`; }
          const guest=()=> state.amostraNome || state.lista[0] || 'Convidado';
          function renderPainel(tipo){
            const root=document.createElement('section'); root.className='pm-card'; root.dataset.tipo=tipo;
            const v = state.variaveisPorTipo[tipo] || (state.variaveisPorTipo[tipo]={guest:true,nomeEvento:true,data:true,hora:true,local:true,endereco:false});
            root.innerHTML = `
              <div style="display:flex;justify-content:space-between;align-items:center;gap:8px;flex-wrap:wrap">
                <strong>${TYPES[tipo].label}</strong>
                <button class="pm-btn pm-btn-ghost btnRemover">Remover</button>
              </div>
              <div class="pm-hint" style="margin:8px 0">Ative variáveis e escolha 1 dos 6 modelos. O nome abaixo é exemplo.</div>
              <div class="pm-actions" style="flex-wrap:wrap;margin:8px 0">
                ${['guest','nomeEvento','data','hora','local','endereco'].map(k=>`<label class="pm-step"><input type="checkbox" data-v="${k}" ${v[k]?'checked':''}> ${({guest:'Nome do convidado',nomeEvento:'Nome do evento',data:'Data',hora:'Hora',local:'Local',endereco:'Endereço'})[k]}</label>`).join('')}
              </div>
              <label style="display:block;margin:8px 0 4px">Exemplo de convidado</label>
              <input class="inp-exemplo" type="text" placeholder="Ex.: Maria" value="${guest()}"/>
              <div class="pm-grid" style="gap:10px;margin-top:12px" data-modelos></div>`;
            $$('.pm-step input[type="checkbox"]',root).forEach(chk=>chk.addEventListener('change',()=>{v[chk.dataset.v]=chk.checked; atualiza();}));
            $('.inp-exemplo',root).addEventListener('input',e=>{state.amostraNome=e.target.value; atualiza();});
            $('.btnRemover',root).addEventListener('click',()=>{ state.tiposSelecionados.delete(tipo); delete state.variaveisPorTipo[tipo]; delete state.modelosEscolhidos[tipo]; root.remove(); kpis(); chips(); autoPreview(); });
            function atualiza(){
              const modelos=gerarModelos(tipo,v,state.evento,guest()); const cont=root.querySelector('[data-modelos]'); cont.innerHTML='';
              modelos.forEach((texto,idx)=>{ const card=document.createElement('div'); card.className='pm-card'; card.style.border='1px solid var(--line)';
                card.innerHTML=`<label class="pm-step"><input type="radio" name="modelo-${tipo}" value="${idx}"> Escolher</label>
                                 <div class="pm-pre" style="margin-top:6px;white-space:pre-wrap">${texto||'<i>Complete variáveis…</i>'}</div>
                                 <div style="display:flex;gap:8px;justify-content:flex-end;margin-top:6px">
                                   <button class="pm-btn pm-btn-ghost btnCopiar">Copiar</button></div>`;
                $('input[type="radio"]',card).addEventListener('change',()=>{ cont.querySelectorAll('.pm-card').forEach(n=>n.classList.remove('is-current')); card.classList.add('is-current'); state.modelosEscolhidos[tipo]={index:idx,texto}; kpis(); autoPreview(); });
                $('.btnCopiar',card).addEventListener('click', async ev => { await safeCopyText(texto||'', ev.currentTarget); });
                cont.appendChild(card);
              });
            }
            atualiza(); return root;
          }
          function chips(){ $$('.chk-tipo').forEach(chk=>chk.checked=state.tiposSelecionados.has(chk.value)); }
          function kpis(){ $('#kpiTipos').textContent=`Tipos: ${state.tiposSelecionados.size}`; $('#kpiModelos').textContent=`Modelos: ${Object.keys(state.modelosEscolhidos).length}`; }
          function autoPreview(){ const tipos=[...state.tiposSelecionados]; if(!tipos.length){ $('#autoPreview').textContent='Selecione ao menos um tipo.'; return; }
            $('#autoPreview').textContent = tipos.map(t=>`--- ${TYPES[t].label} ---\n${state.modelosEscolhidos[t]?.texto||'[Selecione um modelo]'}`).join('\n\n'); }
          function bind(){
            $$('.chk-tipo').forEach(chk=>chk.addEventListener('change',()=>{
              const t=chk.value;
              if(chk.checked && !state.tiposSelecionados.has(t)){ state.tiposSelecionados.add(t); $('#s3PainelTipos').appendChild(renderPainel(t)); }
              if(!chk.checked){ state.tiposSelecionados.delete(t); $(`#s3PainelTipos [data-tipo="${t}"]`)?.remove(); delete state.variaveisPorTipo[t]; delete state.modelosEscolhidos[t]; }
              chips(); kpis(); autoPreview();
            }));
            $('#btnCopyAuto').addEventListener('click', async ev => { await safeCopyText($('#autoPreview').textContent||'', ev.currentTarget); });
            $('#btnResumo').addEventListener('click', ()=>{ const tipos=[...state.tiposSelecionados]; if(!tipos.length) return alert('Selecione ao menos um tipo.');
              alert(`Resumo:\n\n${tipos.map(t=>`• ${TYPES[t].label}: ${state.modelosEscolhidos[t]?`modelo ${state.modelosEscolhidos[t].index+1}`:'sem modelo'}`).join('\n')}`); });
            $('#btnSelect').addEventListener('click',()=>{ const ta=$('#modalCopyText'); ta.removeAttribute('readonly'); ta.focus(); ta.select(); ta.setAttribute('readonly',''); });
            $('#btnDownloadTxt').addEventListener('click',()=>{ const t=$('#modalCopyText').value||''; downloadAsTxt(t,'mensagens.txt'); });
            $('#btnCloseModal').addEventListener('click', closeCopyModal);
          }
          loadEvento(); renderEtiqueta(); bind();
          EOF

      - name: Commit & push
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add -A
          git commit -m "Assistente Ceremonial: adiciona Tela 3 (programação) + libs"
          git push
