name: CI

on:
  workflow_dispatch:
    inputs:
      note:
        description: "Workflow arquivado — execute apenas para referência histórica"
        required: false

jobs:
  build-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Detect Node workspace
        id: workspace
        run: |
          if [ -f package.json ]; then
            echo "has_node=true" >> "$GITHUB_OUTPUT"
          else
            echo "has_node=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
        if: steps.workspace.outputs.has_node == 'true'

      - name: Install dependencies
        run: npm ci
        if: steps.workspace.outputs.has_node == 'true'

      - name: Determinar versão do Playwright
        id: playwright-version
        if: steps.workspace.outputs.has_node == 'true'
        run: |
          version=$(node - <<'NODE'
          const lock = require('./package-lock.json');
          const fromPackages = lock.packages?.['node_modules/@playwright/test']?.version;
          const fromDeps = lock.dependencies?.['@playwright/test']?.version;
          const version = fromPackages || fromDeps;
          if (!version) {
            throw new Error('Não foi possível determinar a versão de @playwright/test');
          }
          console.log(version);
          NODE
          )
          echo "version=$version" >> "$GITHUB_OUTPUT"

      - name: Cache Playwright browsers
        uses: actions/cache@v3
        with:
          path: ~/.cache/ms-playwright
          key: playwright-${{ steps.playwright-version.outputs.version }}
        if: steps.workspace.outputs.has_node == 'true'

      - name: Instalar navegadores Playwright
        run: npx playwright install --with-deps chromium
        if: steps.workspace.outputs.has_node == 'true'

      - name: Testes end-to-end
        run: npm test
        if: steps.workspace.outputs.has_node == 'true'

      - name: Testes end-to-end (cache restaurado)
        run: npm test
        if: steps.workspace.outputs.has_node == 'true'

      - name: Verificação de links Markdown
        if: steps.workspace.outputs.has_node == 'true'
        run: |
          set -euo pipefail
          for file in $(git ls-files '*.md'); do
            echo "Checando links em ${file}"
            npx --yes markdown-link-check --quiet --config .markdown-link-check.json "$file"
          done

      - name: Snapshot da árvore do repositório (profundidade 2)
        if: steps.workspace.outputs.has_node == 'true'
        run: |
          if command -v tree >/dev/null 2>&1; then
            tree -a -L 2
          elif command -v npx >/dev/null 2>&1; then
            npx --yes tree-cli -l 2 -a
          else
            echo "Nem tree nem npx estão disponíveis." >&2
            exit 1
          fi

      - name: Registrar verificação estática
        if: steps.workspace.outputs.has_node == 'false'
        run: echo "Nenhum workspace Node detectado; etapas baseadas em npm foram ignoradas."
