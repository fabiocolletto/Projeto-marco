name: Weekly Maintenance Audit

on:
  schedule:
    - cron: '0 6 * * 0'
      timezone: America/Sao_Paulo
  workflow_dispatch:
    inputs:
      apply:
        description: "Executa o arquivamento utilizando o relatório mais recente"
        required: false
        default: 'false'

jobs:
  maintenance:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm ci --ignore-scripts

      - name: Run audit (dry-run)
        run: npm run audit:repo

      - name: Determine latest report
        id: report
        run: |
          REPORT_DIR=$(ls -1 reports | sort | tail -n 1)
          echo "dir=$REPORT_DIR" >> "$GITHUB_OUTPUT"

      - name: Upload audit artifacts
        uses: actions/upload-artifact@v4
        with:
          name: maintenance-report-${{ steps.report.outputs.dir }}
          path: reports/${{ steps.report.outputs.dir }}

      - name: Apply archive policy (manual trigger)
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.apply == 'true'
        run: |
          npm run archive:apply -- --report=${{ steps.report.outputs.dir }}

      - name: Update weekly issue
        uses: actions/github-script@v7
        env:
          REPORT_DIR: ${{ steps.report.outputs.dir }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = require('path');
            const reportDir = process.env.REPORT_DIR;
            if (!reportDir) {
              core.warning('Report directory not available, skipping issue update.');
              return;
            }
            const summaryPath = path.join('reports', reportDir, 'summary.md');
            const findingsPath = path.join('reports', reportDir, 'findings.json');
            let summary = '';
            let findings = [];
            try {
              summary = fs.readFileSync(summaryPath, 'utf8');
            } catch (err) {
              core.warning(`Summary not found at ${summaryPath}`);
            }
            try {
              findings = JSON.parse(fs.readFileSync(findingsPath, 'utf8'));
            } catch (err) {
              core.warning(`Findings not found at ${findingsPath}`);
            }
            const issueTitle = 'Relatório de Manutenção Semanal';
            const body = `## Relatório ${reportDir}\n\n${summary}\n\nTotal de candidatos no relatório: **${findings.length}**\n`;
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              per_page: 100,
            });
            const existing = issues.data.find((issue) => issue.title === issueTitle);
            if (existing) {
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: existing.number,
                body,
              });
              core.info(`Issue #${existing.number} updated.`);
            } else {
              const created = await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: issueTitle,
                body,
              });
              core.info(`Issue #${created.data.number} created.`);
            }
