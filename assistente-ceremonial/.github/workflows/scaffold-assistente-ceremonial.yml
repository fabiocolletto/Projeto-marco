name: Scaffold Assistente Ceremonial (Tela 1)

on:
  workflow_dispatch:

jobs:
  scaffold:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create directories
        run: |
          mkdir -p marco/assistente-ceremonial/src/lib

      - name: Write index.html (Tela 1)
        run: |
          cat > marco/assistente-ceremonial/index.html << 'EOF'
          <!doctype html>
          <html lang="pt-BR">
          <head>
            <meta charset="utf-8" />
            <meta name="viewport" content="width=device-width, initial-scale=1" />
            <title>Assistente Ceremonial — Etapa 1</title>
            <!-- O site 5h injeta estilos/variáveis globais -->
          </head>
          <body>
            <main id="etapa1" class="pm-wrap" data-screen="1">
              <header class="pm-header">
                <h1 class="pm-title">Programação de Mensagens</h1>
                <p class="pm-sub">Etapa 1 de 3 · Dados do evento</p>
                <nav class="pm-steps" aria-label="Passos">
                  <span class="pm-step is-current">1. Evento</span>
                  <span class="pm-step is-disabled">2. Lista</span>
                  <span class="pm-step is-disabled">3. Mensagens</span>
                </nav>
              </header>

              <div class="pm-grid">
                <aside class="pm-aside" aria-labelledby="formTitulo">
                  <section class="pm-card" data-card="form">
                    <h2 id="formTitulo" class="pm-card-title">Dados do Evento</h2>
                    <div class="pm-fields">
                      <div class="pm-field">
                        <label for="s1_evt_nome">Nome do evento</label>
                        <input id="s1_evt_nome" type="text" placeholder="Ex.: Casamento Ana &amp; Marco" autocomplete="off" />
                      </div>

                      <div class="pm-field-group">
                        <div class="pm-field">
                          <label for="s1_evt_data">Data</label>
                          <input id="s1_evt_data" type="date" />
                        </div>
                        <div class="pm-field">
                          <label for="s1_evt_hora">Hora</label>
                          <input id="s1_evt_hora" type="time" />
                        </div>
                      </div>

                      <div class="pm-field-group">
                        <div class="pm-field">
                          <label for="s1_evt_local">Local</label>
                          <input id="s1_evt_local" type="text" placeholder="Ex.: Espaço Jardins" autocomplete="off" />
                        </div>
                        <div class="pm-field">
                          <label for="s1_evt_endereco">Endereço</label>
                          <input id="s1_evt_endereco" type="text" placeholder="Rua, nº, bairro, cidade" autocomplete="off" />
                        </div>
                      </div>

                      <div class="pm-field">
                        <label for="s1_evt_anfitriao">Anfitrião/Contato</label>
                        <input id="s1_evt_anfitriao" type="text" placeholder="Ex.: Ana / (41) 99999-0000" autocomplete="off" />
                      </div>
                    </div>

                    <div class="pm-actions">
                      <button id="btnS1Salvar" class="pm-btn pm-btn-primary">Salvar &amp; Ir para Etapa 3</button>
                      <button id="btnS1Limpar" class="pm-btn pm-btn-ghost">Limpar</button>
                      <button id="btnS1PreencherExemplo" class="pm-btn pm-btn-ghost" title="Preenche com dados fictícios para teste">Preencher com exemplo</button>
                      <button id="btnS1Ir3" class="pm-btn pm-btn-ghost">Ir para Etapa 3</button>
                    </div>

                    <p class="pm-hint">Os dados ficam no seu navegador (localStorage). Na Etapa 3 eles aparecem automaticamente.</p>
                  </section>
                </aside>

                <section class="pm-main">
                  <section class="pm-card" data-card="etiqueta">
                    <div class="pm-card-header">
                      <h2 class="pm-card-title">Etiqueta do Evento (prévia)</h2>
                      <div class="pm-inline-actions">
                        <button id="btnCopyTag" class="pm-btn pm-btn-ghost">Copiar</button>
                        <button id="btnDownloadTag" class="pm-btn pm-btn-ghost">Baixar .txt</button>
                      </div>
                    </div>

                    <div id="s1Preview" class="pm-etiqueta" aria-live="polite" aria-atomic="true">
                      <div class="pm-eti-empty">Preencha os dados ao lado para visualizar a etiqueta.</div>
                    </div>

                    <details class="pm-details">
                      <summary>Ver como texto</summary>
                      <pre id="s1PreviewText" class="pm-pre"></pre>
                    </details>
                  </section>

                  <section class="pm-card" data-card="diag">
                    <h2 class="pm-card-title">Diagnóstico</h2>
                    <ul class="pm-list" id="diagInfo"></ul>
                  </section>
                </section>
              </div>
            </main>

            <dialog id="modalCopy" class="pm-modal" aria-labelledby="modalCopyTitle">
              <h3 id="modalCopyTitle">Cópia manual</h3>
              <p>Seu ambiente bloqueou o acesso à área de transferência. Selecione o texto ou baixe um .txt.</p>
              <textarea id="modalCopyText" readonly></textarea>
              <div class="pm-actions">
                <button id="btnSelect" class="pm-btn pm-btn-primary">Selecionar texto</button>
                <button id="btnDownloadTxt" class="pm-btn pm-btn-ghost">Baixar .txt</button>
                <button id="btnCloseModal" class="pm-btn">Fechar</button>
              </div>
            </dialog>

            <script type="module" src="./src/passo1.js"></script>
          </body>
          </html>
          EOF

      - name: Write src/lib/state.js
        run: |
          cat > marco/assistente-ceremonial/src/lib/state.js << 'EOF'
          export const STORAGE_KEYS = { evento: 'pm_evento_v1' };
          export const state = {
            evento: { nome:'', data:'', hora:'', local:'', endereco:'', anfitriao:'' }
          };
          EOF

      - name: Write src/lib/storage.js
        run: |
          cat > marco/assistente-ceremonial/src/lib/storage.js << 'EOF'
          import { STORAGE_KEYS, state } from './state.js';
          export function saveEvento() {
            localStorage.setItem(STORAGE_KEYS.evento, JSON.stringify(state.evento));
          }
          export function loadEvento() {
            try {
              const raw = localStorage.getItem(STORAGE_KEYS.evento);
              if (!raw) return false;
              const obj = JSON.parse(raw);
              if (obj && typeof obj === 'object') {
                state.evento = Object.assign(
                  { nome:'', data:'', hora:'', local:'', endereco:'', anfitriao:'' },
                  obj
                );
                return true;
              }
            } catch (_) {}
            return false;
          }
          EOF

      - name: Write src/lib/etiqueta.js
        run: |
          cat > marco/assistente-ceremonial/src/lib/etiqueta.js << 'EOF'
          import { state } from './state.js';
          function fmtDataBr(iso) {
            if (!iso) return '';
            const [y, m, d] = iso.split('-');
            return `${d}/${m}/${y}`;
          }
          export function etiquetaAsText() {
            const e = state.evento;
            return [
              `Evento: ${e.nome || '-'}`,
              `Data: ${fmtDataBr(e.data) || '-'}${e.hora ? ` às ${e.hora}`:''}`,
              `Local: ${e.local || '-'}`,
              `Endereço: ${e.endereco || '-'}`,
              `Contato: ${e.anfitriao || '-'}`
            ].join('\\n');
          }
          export function renderEtiqueta(elEtiqueta, elTextPre) {
            const e = state.evento;
            if (!e.nome && !e.data && !e.local && !e.endereco && !e.anfitriao) {
              elEtiqueta.innerHTML = '<div class="pm-eti-empty">Preencha os dados ao lado para visualizar a etiqueta.</div>';
              if (elTextPre) elTextPre.textContent = '';
              return;
            }
            elEtiqueta.innerHTML = `
              <div class="pm-eti-header">
                <div class="pm-eti-title">${e.nome || '—'}</div>
                <div class="pm-eti-chip">${fmtDataBr(e.data) || 'Data a definir'} ${e.hora || ''}</div>
              </div>
              <div class="pm-eti-grid">
                <div class="pm-eti-item">
                  <span class="pm-eti-label">Local</span>
                  <div class="pm-eti-value">${e.local || '—'}</div>
                </div>
                <div class="pm-eti-item">
                  <span class="pm-eti-label">Endereço</span>
                  <div class="pm-eti-value">${e.endereco || '—'}</div>
                </div>
                <div class="pm-eti-item">
                  <span class="pm-eti-label">Contato</span>
                  <div class="pm-eti-value">${e.anfitriao || '—'}</div>
                </div>
              </div>
            `;
            if (elTextPre) elTextPre.textContent = etiquetaAsText();
          }
          EOF

      - name: Write src/lib/clipboard.js
        run: |
          cat > marco/assistente-ceremonial/src/lib/clipboard.js << 'EOF'
          export async function safeCopyText(text, ctxBtn) {
            try {
              if (window.isSecureContext && navigator.clipboard && navigator.clipboard.writeText) {
                await navigator.clipboard.writeText(text);
                flashBtn(ctxBtn, 'Copiado!');
                return { ok: true, mode: 'clipboard' };
              }
            } catch (_) {}
            try {
              const ta = document.createElement('textarea');
              ta.value = text; ta.setAttribute('readonly','');
              ta.style.position='fixed'; ta.style.top='-1000px'; ta.style.opacity='0';
              document.body.appendChild(ta); ta.focus(); ta.select();
              const ok = document.execCommand('copy');
              document.body.removeChild(ta);
              if (ok) { flashBtn(ctxBtn, 'Copiado!'); return { ok: true, mode: 'execCommand' }; }
            } catch (_) {}
            openCopyModal(text);
            flashBtn(ctxBtn, 'Copie manualmente');
            return { ok: false, mode: 'manual' };
          }
          function flashBtn(btn, msg) {
            if (!btn) return; const old = btn.textContent; btn.textContent = msg; setTimeout(()=>{ btn.textContent = old; }, 1200);
          }
          export function openCopyModal(text) {
            const dlg = document.getElementById('modalCopy');
            const ta = document.getElementById('modalCopyText');
            ta.value = text || '';
            if (typeof dlg.showModal === 'function') dlg.showModal();
            else dlg.setAttribute('open','');
            setTimeout(()=>{ ta.removeAttribute('readonly'); ta.focus(); ta.select(); ta.setAttribute('readonly',''); }, 0);
          }
          export function closeCopyModal() {
            const dlg = document.getElementById('modalCopy');
            if (typeof dlg.close === 'function') dlg.close();
            else dlg.removeAttribute('open');
          }
          export function downloadAsTxt(text, filename='etiqueta.txt') {
            const blob = new Blob([text], { type: 'text/plain' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url; a.download = filename; document.body.appendChild(a); a.click();
            setTimeout(()=>{ URL.revokeObjectURL(url); a.remove(); }, 0);
          }
          EOF

      - name: Write src/lib/validators.js
        run: |
          cat > marco/assistente-ceremonial/src/lib/validators.js << 'EOF'
          export function validateEvento(evt) {
            const errors = {};
            if (!evt.nome || evt.nome.trim().length < 3) errors.nome = 'Informe um nome válido.';
            if (evt.data && !/^\\d{4}-\\d{2}-\\d{2}$/.test(evt.data)) errors.data = 'Data inválida.';
            if (evt.hora && !/^\\d{2}:\\d{2}$/.test(evt.hora)) errors.hora = 'Hora inválida.';
            return errors;
          }
          EOF

      - name: Write src/passo1.js
        run: |
          cat > marco/assistente-ceremonial/src/passo1.js << 'EOF'
          import { state } from './lib/state.js';
          import { saveEvento, loadEvento } from './lib/storage.js';
          import { renderEtiqueta, etiquetaAsText } from './lib/etiqueta.js';
          import { safeCopyText, downloadAsTxt, openCopyModal, closeCopyModal } from './lib/clipboard.js';
          import { validateEvento } from './lib/validators.js';

          const $ = (s, el=document) => el.querySelector(s);

          function bindForm() {
            const nome = $('#s1_evt_nome');
            const data = $('#s1_evt_data');
            const hora = $('#s1_evt_hora');
            const local = $('#s1_evt_local');
            const endereco = $('#s1_evt_endereco');
            const anfitriao = $('#s1_evt_anfitriao');

            loadEvento();
            syncForm();
            renderAll();

            $('#btnS1Salvar')?.addEventListener('click', onSalvar);
            $('#btnS1Limpar')?.addEventListener('click', onLimpar);
            $('#btnS1PreencherExemplo')?.addEventListener('click', preencherExemplo);
            $('#btnS1Ir3')?.addEventListener('click', ()=> alert('Dados salvos. Abra a Etapa 3 para continuar.'));

            $('#btnCopyTag')?.addEventListener('click', async (ev)=>{ await safeCopyText(etiquetaAsText(), ev.currentTarget); });
            $('#btnDownloadTag')?.addEventListener('click', ()=> downloadAsTxt(etiquetaAsText(), 'etiqueta.txt'));

            $('#btnSelect')?.addEventListener('click', ()=>{
              const ta = $('#modalCopyText'); ta.removeAttribute('readonly'); ta.focus(); ta.select(); ta.setAttribute('readonly','');
            });
            $('#btnDownloadTxt')?.addEventListener('click', ()=> downloadAsTxt($('#modalCopyText').value || ''));
            $('#btnCloseModal')?.addEventListener('click', closeCopyModal);

            [nome, data, hora, local, endereco, anfitriao].forEach(inp=>{
              inp?.addEventListener('input', ()=>{ takeFormToState(); renderAll(); });
            });

            const diag = $('#diagInfo');
            if (diag) {
              diag.innerHTML = [
                `<li><code>isSecureContext</code>: ${window.isSecureContext}</li>`,
                `<li><code>clipboard.writeText</code>: ${!!(navigator.clipboard && navigator.clipboard.writeText)}</li>`
              ].join('');
            }

            function takeFormToState() {
              state.evento = {
                nome: nome?.value.trim() || '',
                data: data?.value || '',
                hora: hora?.value || '',
                local: local?.value.trim() || '',
                endereco: endereco?.value.trim() || '',
                anfitriao: anfitriao?.value.trim() || ''
              };
            }

            function syncForm() {
              nome && (nome.value = state.evento.nome || '');
              data && (data.value = state.evento.data || '');
              hora && (hora.value = state.evento.hora || '');
              local && (local.value = state.evento.local || '');
              endereco && (endereco.value = state.evento.endereco || '');
              anfitriao && (anfitriao.value = state.evento.anfitriao || '');
            }

            function renderAll() {
              renderEtiqueta($('#s1Preview'), $('#s1PreviewText'));
            }

            function onSalvar() {
              takeFormToState();
              const errs = validateEvento(state.evento);
              if (Object.keys(errs).length) {
                alert('Confira os campos: ' + Object.keys(errs).join(', '));
                return;
              }
              saveEvento();
              renderAll();
              alert('Dados salvos! Abra a Etapa 3 para continuar.');
            }

            function onLimpar() {
              [nome, data, hora, local, endereco, anfitriao].forEach(i=> i && (i.value = ''));
              state.evento = { nome:'', data:'', hora:'', local:'', endereco:'', anfitriao:'' };
              saveEvento();
              renderAll();
            }

            function preencherExemplo() {
              state.evento = {
                nome: 'Casamento Ana & Marco',
                data: '2025-12-20',
                hora: '19:30',
                local: 'Espaço Jardins',
                endereco: 'Rua das Palmeiras, 123 – Curitiba',
                anfitriao: 'Ana (41) 99999-0000'
              };
              syncForm();
              renderAll();
            }
          }

          document.addEventListener('DOMContentLoaded', bindForm);
          EOF

      - name: Commit & push
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add -A
          if git diff --cached --quiet; then
            echo "Nada para commitar."
          else
            git commit -m "Scaffold Assistente Ceremonial (Tela 1) – estrutura + arquivos"
            git push
          fi
