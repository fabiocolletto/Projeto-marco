begin;

create table if not exists public.miniapps (
  id text primary key,
  name text not null,
  entry_path text not null,
  manifest_path text,
  snippet_path text,
  icon_url text,
  is_active boolean not null default true,
  created_by uuid default auth.uid() references auth.users(id),
  created_at timestamptz not null default timezone('utc', now()),
  updated_at timestamptz not null default timezone('utc', now()),
  constraint miniapps_entry_path_not_empty check (length(entry_path) > 0)
);

create unique index if not exists miniapps_entry_path_idx on public.miniapps (entry_path);

create table if not exists public.miniapp_translations (
  id bigint generated by default as identity primary key,
  miniapp_id text not null references public.miniapps(id) on delete cascade,
  locale text not null,
  display_name text not null,
  snippet_payload jsonb not null,
  created_by uuid default auth.uid() references auth.users(id),
  created_at timestamptz not null default timezone('utc', now()),
  updated_at timestamptz not null default timezone('utc', now()),
  constraint miniapp_translations_locale_check check (locale ~ '^[a-z]{2}(-[a-z0-9]+)*$')
);

create unique index if not exists miniapp_translations_unique_locale on public.miniapp_translations (miniapp_id, locale);

create table if not exists public.task_items (
  id uuid primary key default gen_random_uuid(),
  miniapp_id text not null references public.miniapps(id) on delete cascade,
  owner_id uuid not null default auth.uid() references auth.users(id),
  title text not null,
  status text not null default 'pending',
  due_date date,
  payload jsonb not null default '{}'::jsonb,
  created_at timestamptz not null default timezone('utc', now()),
  updated_at timestamptz not null default timezone('utc', now()),
  constraint task_items_status_check check (status in ('pending', 'in_progress', 'done'))
);

create index if not exists task_items_owner_idx on public.task_items (owner_id);
create index if not exists task_items_miniapp_idx on public.task_items (miniapp_id);

create table if not exists public.release_log (
  version text primary key,
  release_date date not null,
  description text not null,
  status text not null,
  recorded_by uuid default auth.uid() references auth.users(id),
  metadata jsonb not null default '{}'::jsonb,
  created_at timestamptz not null default timezone('utc', now()),
  updated_at timestamptz not null default timezone('utc', now()),
  constraint release_log_version_numeric check (version ~ '^[0-9]+$')
);

create table if not exists public.feature_flags (
  flag_key text primary key,
  description text,
  is_enabled boolean not null default false,
  rollout jsonb not null default '{}'::jsonb,
  created_by uuid default auth.uid() references auth.users(id),
  created_at timestamptz not null default timezone('utc', now()),
  updated_at timestamptz not null default timezone('utc', now())
);

drop trigger if exists set_miniapps_updated_at on public.miniapps;
create trigger set_miniapps_updated_at
before update on public.miniapps
for each row execute function public.handle_updated_at();

drop trigger if exists set_miniapp_translations_updated_at on public.miniapp_translations;
create trigger set_miniapp_translations_updated_at
before update on public.miniapp_translations
for each row execute function public.handle_updated_at();

drop trigger if exists set_task_items_updated_at on public.task_items;
create trigger set_task_items_updated_at
before update on public.task_items
for each row execute function public.handle_updated_at();

drop trigger if exists set_release_log_updated_at on public.release_log;
create trigger set_release_log_updated_at
before update on public.release_log
for each row execute function public.handle_updated_at();

drop trigger if exists set_feature_flags_updated_at on public.feature_flags;
create trigger set_feature_flags_updated_at
before update on public.feature_flags
for each row execute function public.handle_updated_at();

alter table public.miniapps enable row level security;
alter table public.miniapp_translations enable row level security;
alter table public.task_items enable row level security;
alter table public.release_log enable row level security;
alter table public.feature_flags enable row level security;

drop policy if exists "Miniapps are viewable by everyone" on public.miniapps;
create policy "Miniapps are viewable by everyone" on public.miniapps
for select using (true);

drop policy if exists "Miniapps owned by creator" on public.miniapps;
create policy "Miniapps owned by creator" on public.miniapps
for insert with check (created_by = auth.uid());

drop policy if exists "Miniapps updates restricted" on public.miniapps;
create policy "Miniapps updates restricted" on public.miniapps
for update using (created_by = auth.uid()) with check (created_by = auth.uid());

drop policy if exists "Miniapps removal restricted" on public.miniapps;
create policy "Miniapps removal restricted" on public.miniapps
for delete using (created_by = auth.uid());

drop policy if exists "Miniapp translations readable" on public.miniapp_translations;
create policy "Miniapp translations readable" on public.miniapp_translations
for select using (true);

drop policy if exists "Miniapp translations managed by author" on public.miniapp_translations;
create policy "Miniapp translations managed by author" on public.miniapp_translations
for insert with check (created_by = auth.uid());

drop policy if exists "Miniapp translations update restricted" on public.miniapp_translations;
create policy "Miniapp translations update restricted" on public.miniapp_translations
for update using (created_by = auth.uid()) with check (created_by = auth.uid());

drop policy if exists "Miniapp translations removal restricted" on public.miniapp_translations;
create policy "Miniapp translations removal restricted" on public.miniapp_translations
for delete using (created_by = auth.uid());

drop policy if exists "Task items readable by owner" on public.task_items;
create policy "Task items readable by owner" on public.task_items
for select using (owner_id = auth.uid());

drop policy if exists "Task items insert restricted" on public.task_items;
create policy "Task items insert restricted" on public.task_items
for insert with check (owner_id = auth.uid());

drop policy if exists "Task items update restricted" on public.task_items;
create policy "Task items update restricted" on public.task_items
for update using (owner_id = auth.uid()) with check (owner_id = auth.uid());

drop policy if exists "Task items removal restricted" on public.task_items;
create policy "Task items removal restricted" on public.task_items
for delete using (owner_id = auth.uid());

drop policy if exists "Release log readable" on public.release_log;
create policy "Release log readable" on public.release_log
for select using (true);

drop policy if exists "Release log managed by recorder" on public.release_log;
create policy "Release log managed by recorder" on public.release_log
for insert with check (recorded_by = auth.uid());

drop policy if exists "Release log update restricted" on public.release_log;
create policy "Release log update restricted" on public.release_log
for update using (recorded_by = auth.uid()) with check (recorded_by = auth.uid());

drop policy if exists "Release log removal restricted" on public.release_log;
create policy "Release log removal restricted" on public.release_log
for delete using (recorded_by = auth.uid());

drop policy if exists "Feature flags readable" on public.feature_flags;
create policy "Feature flags readable" on public.feature_flags
for select using (true);

drop policy if exists "Feature flags managed by creator" on public.feature_flags;
create policy "Feature flags managed by creator" on public.feature_flags
for insert with check (created_by = auth.uid());

drop policy if exists "Feature flags update restricted" on public.feature_flags;
create policy "Feature flags update restricted" on public.feature_flags
for update using (created_by = auth.uid()) with check (created_by = auth.uid());

drop policy if exists "Feature flags removal restricted" on public.feature_flags;
create policy "Feature flags removal restricted" on public.feature_flags
for delete using (created_by = auth.uid());

insert into public.miniapps (id, name, entry_path, manifest_path, snippet_path, icon_url, is_active, created_by)
values
  ('gestor-de-tarefas', 'Gestor de Tarefas', 'miniapps/gestor-de-tarefas/app.html', 'miniapps/gestor-de-tarefas/manifest.json', 'miniapps/gestor-de-tarefas/i18n-snippet.json', null, true, null)
on conflict (id) do update set
  name = excluded.name,
  entry_path = excluded.entry_path,
  manifest_path = excluded.manifest_path,
  snippet_path = excluded.snippet_path,
  icon_url = excluded.icon_url,
  is_active = excluded.is_active,
  updated_at = timezone('utc', now());

insert into public.miniapp_translations (miniapp_id, locale, display_name, snippet_payload, created_by)
values
  ('gestor-de-tarefas', 'pt-br', 'Gestor de Tarefas', $$
  {
    "miniapps": {
      "gestor-de-tarefas": {
        "titulo": "Gestor de Tarefas",
        "tabela": {
          "tarefa": "Tarefa",
          "status": "Status",
          "novo": "Nova linha",
          "excluir": "Excluir"
        }
      }
    }
  }
  $$::jsonb, null),
  ('gestor-de-tarefas', 'en-us', 'Task Manager', $$
  {
    "miniapps": {
      "gestor-de-tarefas": {
        "titulo": "Task Manager",
        "tabela": {
          "tarefa": "Task",
          "status": "Status",
          "novo": "New row",
          "excluir": "Delete"
        }
      }
    }
  }
  $$::jsonb, null),
  ('gestor-de-tarefas', 'es-419', 'Gestor de Tareas', $$
  {
    "miniapps": {
      "gestor-de-tarefas": {
        "titulo": "Gestor de Tareas",
        "tabela": {
          "tarefa": "Tarea",
          "status": "Estado",
          "novo": "Nueva fila",
          "excluir": "Eliminar"
        }
      }
    }
  }
  $$::jsonb, null)
on conflict (miniapp_id, locale) do update set
  display_name = excluded.display_name,
  snippet_payload = excluded.snippet_payload,
  updated_at = timezone('utc', now());

insert into public.release_log (version, release_date, description, status, recorded_by)
values
  ('009', '2025-10-25', 'Migrado catálogo e registro de alterações para Supabase com políticas RLS.', 'operational', null),
  ('008', '2025-10-24', 'Configurado Supabase CLI, migrações iniciais e deploy automatizado via GitHub Actions.', 'operational', null),
  ('007', '2025-10-23', 'Tornado carregamento de i18n resiliente para manter rodapé e textos padrão.', 'operational', null),
  ('006', '2025-10-22', 'Corrigido namespace i18n do MiniApp Gestor de Tarefas para carregar textos.', 'operational', null),
  ('005', '2025-10-22', 'Ajustada responsividade do AppBase e tabela do MiniApp em telas menores.', 'operational', null),
  ('004', '2024-04-11', 'Corrigida rotina de troca de idioma no AppBase para reaplicar traduções.', 'operational', null),
  ('003', '2024-04-10', 'Preparada estrutura declarativa de MiniApps, catálogo e validações R1.11.', 'operational', null),
  ('002', '2024-04-09', 'Criados rodapé persistente, modal de status e rotina de registro sequencial.', 'operational', null),
  ('001', '2024-04-08', 'Adicionados arquivos iniciais de documentação e convenções de importação.', 'operational', null)
on conflict (version) do update set
  release_date = excluded.release_date,
  description = excluded.description,
  status = excluded.status,
  updated_at = timezone('utc', now());

insert into public.feature_flags (flag_key, description, is_enabled, rollout, created_by)
values
  ('demo', 'Flag de demonstração para recursos do AppBase.', true, '{}'::jsonb, null)
on conflict (flag_key) do update set
  description = excluded.description,
  is_enabled = excluded.is_enabled,
  rollout = excluded.rollout,
  updated_at = timezone('utc', now());

create or replace view public.miniapps_catalog_v1
with (security_invoker = true)
as
select
  m.id,
  m.name,
  m.entry_path,
  m.manifest_path,
  m.snippet_path,
  m.icon_url,
  m.is_active,
  m.updated_at,
  coalesce(jsonb_object_agg(mt.locale, jsonb_build_object(
    'display_name', mt.display_name,
    'snippet', mt.snippet_payload
  ) order by mt.locale), '{}'::jsonb) as translations
from public.miniapps m
left join public.miniapp_translations mt on mt.miniapp_id = m.id
where m.is_active is distinct from false
group by m.id, m.name, m.entry_path, m.manifest_path, m.snippet_path, m.icon_url, m.is_active, m.updated_at;

create or replace view public.release_log_latest_v1
with (security_invoker = true)
as
select r.version,
       r.release_date,
       r.description,
       r.status,
       r.metadata,
       r.updated_at
from public.release_log r
order by r.version::int desc
limit 1;

commit;
