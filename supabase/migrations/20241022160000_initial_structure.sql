create extension if not exists "pgcrypto";

create table if not exists public.profiles (
  id uuid primary key default gen_random_uuid(),
  email text not null unique,
  full_name text,
  is_active boolean not null default true,
  created_at timestamptz not null default timezone('utc', now()),
  updated_at timestamptz not null default timezone('utc', now())
);

create table if not exists public.tasks (
  id uuid primary key default gen_random_uuid(),
  profile_id uuid references public.profiles(id) on delete set null,
  title text not null,
  description text,
  status text not null default 'pending',
  due_date date,
  created_at timestamptz not null default timezone('utc', now()),
  updated_at timestamptz not null default timezone('utc', now()),
  constraint tasks_status_check check (status in ('pending', 'in_progress', 'done'))
);

create table if not exists public.task_activity (
  id bigint generated by default as identity primary key,
  task_id uuid references public.tasks(id) on delete cascade,
  action text not null,
  details jsonb not null default '{}'::jsonb,
  performed_at timestamptz not null default timezone('utc', now())
);

create or replace function public.handle_updated_at()
returns trigger
language plpgsql
as $$
begin
  new.updated_at := timezone('utc', now());
  return new;
end;
$$;

create or replace function public.log_task_activity()
returns trigger
language plpgsql
as $$
declare
  payload jsonb;
begin
  if tg_op = 'DELETE' then
    payload := to_jsonb(old);
  else
    payload := to_jsonb(new);
  end if;

  insert into public.task_activity (task_id, action, details)
  values (
    case tg_op when 'DELETE' then old.id else new.id end,
    tg_op,
    coalesce(payload, '{}'::jsonb)
  );

  if tg_op = 'DELETE' then
    return old;
  end if;
  return new;
end;
$$;

create trigger set_profiles_updated_at
before update on public.profiles
for each row execute function public.handle_updated_at();

create trigger set_tasks_updated_at
before update on public.tasks
for each row execute function public.handle_updated_at();

create trigger log_task_activity_after_insert
after insert on public.tasks
for each row execute function public.log_task_activity();

create trigger log_task_activity_after_update
after update on public.tasks
for each row execute function public.log_task_activity();

create trigger log_task_activity_after_delete
after delete on public.tasks
for each row execute function public.log_task_activity();
