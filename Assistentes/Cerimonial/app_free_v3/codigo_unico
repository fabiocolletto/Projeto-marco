<!doctype html>
<html lang="pt-BR">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Assistente Cerimonial – App v3 (HTML Único)</title>
  <style>
    /* =====================
       CSS RESPONSIVO (INLINE)
       ===================== */
    :root{
      --bg:#fff; --fg:#111; --muted:#666; --line:#000; --accent:#111;
      --radius-lg:16px; --radius-md:12px; --radius-sm:10px;
      --tab-bg:#fff; --tab-active:#111; --tab-muted:#aaa;
    }
    *,*::before,*::after{ box-sizing:border-box; }
    html{ font-size:16px; }
    body{ margin:0; background:var(--bg); color:var(--fg); font:14px/1.5 system-ui,-apple-system,Segoe UI,Roboto,Arial; }

    /* NAV DE TELAS */
    .navwrap{ background:#efefef; padding:16px 0; }
    .tabs{ max-width:960px; margin:0 auto; display:flex; gap:8px; align-items:center; justify-content:flex-start; padding:0 16px; flex-wrap:wrap; }
    .tab{ appearance:none; border:1px solid #000; background:var(--tab-bg); color:#000; padding:10px 14px; border-radius:12px; cursor:pointer; font-weight:700; }
    .tab[aria-current="page"], .tab.active{ background:var(--tab-active); color:#fff; }
    .tab:focus{ outline:2px dashed #000; outline-offset:2px; }

    /* TOOLBAR */
    .toolbar{ max-width:960px; margin:10px auto 0; display:flex; flex-wrap:wrap; gap:8px; align-items:center; padding:8px 16px; border-bottom:2px solid var(--line); background:#fff; }
    .btn{ appearance:none; border:1px solid #000; background:#fff; color:#000; padding:8px 12px; border-radius:var(--radius-sm); cursor:pointer; font-weight:700; line-height:1; display:inline-flex; align-items:center; gap:6px; }
    .btn:active{ transform:translateY(1px); }
    .btn:focus{ outline:2px dashed #000; outline-offset:2px; }
    .muted{ color:var(--muted); margin-left:auto; white-space:nowrap; }

    /* CONTEÚDO */
    .wrap{ max-width:960px; margin:0 auto; padding:16px; }
    .grid{ display:grid; grid-template-columns:1fr 1fr; gap:12px; }
    .card{ background:#fff; border:1px solid #000; border-radius:var(--radius-lg); padding:16px; box-shadow:4px 4px 0 #000; }
    label{ display:block; font-weight:700; margin:8px 0 4px; }
    input[type="text"], input[type="date"], input[type="time"], textarea{ width:100%; padding:10px 12px; border:1px solid #000; border-radius:var(--radius-sm); background:#fff; color:#000; line-height:1.2; min-height:42px; }
    textarea{ resize:vertical; }
    .help{ font-size:12px; color:#333; margin-top:4px; }

    /* ETIQUETA/RESUMO */
    .etiqueta{ display:flex; flex-wrap:wrap; gap:10px; align-items:center; padding:10px 12px; border:1px solid #000; border-radius:var(--radius-md); background:#fff; box-shadow:3px 3px 0 #000; margin:12px 0 16px; }
    .etq-item b{ font-weight:800; }

    /* LISTA */
    .placeholder{ border:1px dashed #000; border-radius:var(--radius-md); padding:16px; color:#333; background:#fff; }
    #listaUl{ padding-left:18px; margin:8px 0; }
    #listaUl li{ margin:4px 0; display:flex; align-items:center; gap:8px; }
    #listaUl li > button{ border:1px solid #000; background:#fff; border-radius:8px; cursor:pointer; padding:0 8px; }

    /* SCREENS */
    [data-screen]{ display:none; }
    [data-screen].active{ display:block; }

    /* RESPONSIVO */
    @media (max-width: 820px){ .grid{ grid-template-columns:1fr; } }
    @media (max-width: 600px){
      .toolbar{ gap:6px; }
      .btn{ padding:8px 10px; }
      .muted{ width:100%; order:99; margin-left:0; }
      .etiqueta{ gap:8px; }
    }
    @media (max-width: 420px){ .btn{ width:100%; justify-content:center; } .tabs{ justify-content:space-between; } }

    /* IMPRESSÃO */
    @media print{ .navwrap, .toolbar{ display:none; } .card{ box-shadow:none; } .wrap{ max-width:100%; padding:0; } }
  </style>
</head>
<body>
  <!-- Navegação entre telas -->
  <div class="navwrap">
    <div class="tabs" role="tablist">
      <button class="tab" data-goto="#dados" aria-controls="dados" aria-current="page">Dados do evento</button>
      <button class="tab" data-goto="#lista" aria-controls="lista">Lista</button>
      <button class="tab" data-goto="#mensagens" aria-controls="mensagens">Mensagens</button>
      <button class="tab" data-goto="#relatorio" aria-controls="relatorio">Relatório</button>
    </div>
  </div>

  <!-- Toolbar global -->
  <div class="toolbar">
    <button class="btn" id="btnIniciar">Iniciar</button>
    <button class="btn" id="btnAbrir">Abrir</button>
    <button class="btn" id="btnSalvar">Salvar</button>
    <button class="btn" id="btnExportarPDF">Imprimir/Salvar PDF</button>
    <button class="btn" id="btnCopiaEtiqueta">Copiar etiqueta</button>
    <button class="btn" id="btnBaixaEtiqueta">Baixar etiqueta .txt</button>
    <button class="btn" id="btnExportaCSV">Exportar convidados .csv</button>
    <span class="muted" id="listaStats">Andamento: 0% • Convidados: 0</span>
  </div>

  <div class="wrap">
    <!-- Etiqueta/resumo -->
    <div class="etiqueta" id="etiquetaBar" aria-live="polite">
      <span class="etq-item"><b data-bind="nome">—</b></span>
      <span class="etq-item">• <span data-bind="datahora">—</span></span>
      <span class="etq-item">• <span data-bind="local">—</span></span>
      <span class="etq-item">• <span data-bind="endereco">—</span></span>
      <span class="etq-item">• <span data-bind="fone">—</span></span>
    </div>

    <!-- ===== Tela: Dados ===== -->
    <section id="dados" data-screen class="active">
      <div class="grid">
        <section class="card">
          <h2 style="margin:0 0 8px">Dados do evento</h2>
          <div class="grid" style="grid-template-columns:1fr 1fr">
            <div style="grid-column:1 / -1">
              <label for="s1_evt_nome">Nome do evento</label>
              <input id="s1_evt_nome" type="text" placeholder="Ex.: Casamento Ana & Marco"/>
            </div>
            <div>
              <label for="s1_evt_data">Data</label>
              <input id="s1_evt_data" type="date"/>
            </div>
            <div>
              <label for="s1_evt_hora">Hora</label>
              <input id="s1_evt_hora" type="time"/>
            </div>
            <div style="grid-column:1 / -1">
              <label for="s1_evt_local">Local</label>
              <input id="s1_evt_local" type="text" placeholder="Ex.: Espaço Jardins"/>
            </div>
            <div style="grid-column:1 / -1">
              <label for="s1_evt_endereco">Endereço</label>
              <input id="s1_evt_endereco" type="text" placeholder="Rua, nº – Bairro – Cidade/UF"/>
            </div>
            <div style="grid-column:1 / -1">
              <label for="s1_evt_anfitriao">Contato do anfitrião</label>
              <input id="s1_evt_anfitriao" type="text" placeholder="Nome e telefone (41) 99999-0000"/>
              <div class="help">O telefone é auto-formatado na etiqueta.</div>
            </div>
          </div>
        </section>
        <section class="card">
          <h2 style="margin:0 0 8px">Atalhos</h2>
          <div class="placeholder">
            <button class="btn" id="btnExemplo">Preencher exemplo</button>
            <div class="help" style="margin-top:8px">Use para testar rapidamente a UI e exportações.</div>
          </div>
        </section>
      </div>
    </section>

    <!-- ===== Tela: Lista ===== -->
    <section id="lista" data-screen>
      <div class="grid">
        <section class="card">
          <h2 style="margin:0 0 8px">Convidados</h2>
          <div class="placeholder">
            <div style="display:flex; gap:8px; align-items:center; flex-wrap:wrap;">
              <input id="guestInput" placeholder="Digite um nome e pressione Enter" style="flex:1 1 260px"/>
              <button class="btn" id="btnAddGuest">+ Adicionar</button>
            </div>
            <ul id="listaUl"></ul>
          </div>
        </section>
        <section class="card">
          <h2 style="margin:0 0 8px">Colagem em massa</h2>
          <div class="placeholder">
            <textarea id="listaBulk" rows="8" placeholder="Cole nomes aqui (um por linha, vírgulas ou tabs)"></textarea>
            <div class="help">O texto é normalizado e deduplicado (case-insensitive). Clique duas vezes no bloco processado para enviar à lista.</div>
            <pre id="outLista" style="display:block; white-space:pre-wrap; background:#f7f7f7; border:1px solid #000; border-radius:8px; padding:10px; margin-top:10px; min-height:60px"></pre>
          </div>
        </section>
      </div>
    </section>

    <!-- ===== Tela: Mensagens ===== -->
    <section id="mensagens" data-screen>
      <div class="grid">
        <section class="card">
          <h2 style="margin:0 0 8px">Mensagens padrão</h2>
          <div class="placeholder">
            <label for="msg_convite">Convite</label>
            <textarea id="msg_convite" rows="4"></textarea>
            <button class="btn" data-copy="#msg_convite">Copiar convite</button>

            <label for="msg_confirm" style="margin-top:12px">Confirmação</label>
            <textarea id="msg_confirm" rows="3"></textarea>
            <button class="btn" data-copy="#msg_confirm">Copiar confirmação</button>

            <label for="msg_lembrete" style="margin-top:12px">Lembrete</label>
            <textarea id="msg_lembrete" rows="3"></textarea>
            <button class="btn" data-copy="#msg_lembrete">Copiar lembrete</button>
          </div>
        </section>
        <section class="card">
          <h2 style="margin:0 0 8px">Dicas</h2>
          <div class="placeholder">
            <div class="help">As mensagens são geradas a partir dos dados do evento e podem ser personalizadas livremente.</div>
          </div>
        </section>
      </div>
    </section>

    <!-- ===== Tela: Relatório ===== -->
    <section id="relatorio" data-screen>
      <div class="grid">
        <section class="card">
          <h2 style="margin:0 0 8px">Resumo</h2>
          <div class="placeholder">
            <p><b>Andamento</b>: <span id="rep_andamento">0%</span></p>
            <p><b>Total de convidados</b>: <span id="rep_total">0</span></p>
            <p><b>Etiqueta</b>:</p>
            <pre id="rep_etiqueta" style="white-space:pre-wrap; background:#f7f7f7; border:1px solid #000; border-radius:8px; padding:10px"></pre>
          </div>
        </section>
        <section class="card">
          <h2 style="margin:0 0 8px">JSON do projeto</h2>
          <div class="placeholder">
            <pre id="rep_json" style="white-space:pre-wrap; background:#f7f7f7; border:1px solid #000; border-radius:8px; padding:10px; max-height:360px; overflow:auto"></pre>
          </div>
        </section>
      </div>
    </section>
  </div>

  <script>
  (function(){
    'use strict';

    const $  =(s,el=document)=>el.querySelector(s);
    const $$ =(s,el=document)=>Array.from(el.querySelectorAll(s));
    const KEY='ac_evt_v3';

    const fmt={
      dateBR(iso){ if(!iso) return ''; const p=String(iso).split('-'); return p.length===3? `${p[2]}/${p[1]}/${p[0]}`: String(iso); },
      dataHora(e){ const d=this.dateBR(e.data); return [d, e.hora].filter(Boolean).join(' '); }
    };
    const mask={ fone(s){ const str=String(s||''); const m=str.match(/(\(?\d{2}\)?\s*\d{4,5}[- ]?\d{4})/); return m?m[0]:str; } };
    const canonical=s=>String(s||'').trim().replace(/\s+/g,' ');
    const keyCI=s=>canonical(s).toLowerCase();

    const state={ evento:{nome:'',data:'',hora:'',local:'',endereco:'',anfitriao:''}, convidados:[], meta:{version:3} };
    try{ const raw=JSON.parse(localStorage.getItem(KEY)||'{}'); if(raw?.evento) Object.assign(state.evento, raw.evento); if(Array.isArray(raw?.convidados)) state.convidados=raw.convidados.map(canonical); }catch(_){ }

    function persist(){ try{ localStorage.setItem(KEY, JSON.stringify(state)); }catch(_){ } }

    // ===== Navegação entre telas =====
    function showScreen(id){
      const hash = id.startsWith('#')? id : ('#'+id);
      $$('[data-screen]').forEach(el=>el.classList.remove('active'));
      const el = $(hash);
      if(el){ el.classList.add('active'); }
      $$('.tab').forEach(t=>{ const to=t.getAttribute('data-goto'); t.classList.toggle('active', to===hash); t.setAttribute('aria-current', to===hash? 'page':'false'); });
      if(location.hash!==hash){ history.replaceState(null,'',hash); }
      // Atualiza relatórios quando entra
      if (hash==='#relatorio'){ paintReport(); }
      if (hash==='#mensagens'){ paintMessages(); }
    }
    $$('.tab').forEach(btn=> btn.addEventListener('click', ()=> showScreen(btn.dataset.goto)) );
    window.addEventListener('hashchange', ()=> showScreen(location.hash||'#dados'));

    // ===== Inputs / etiqueta =====
    const fields = {
      nome:      '#s1_evt_nome',
      data:      '#s1_evt_data',
      hora:      '#s1_evt_hora',
      local:     '#s1_evt_local',
      endereco:  '#s1_evt_endereco',
      anfitriao: '#s1_evt_anfitriao',
    };
    const fieldEntries = Object.entries(fields).map(([k,sel])=>[k,$(sel)]).filter(([,el])=>!!el);

    function paintInputs(){ fieldEntries.forEach(([k,el])=>{ const v=state.evento[k]??''; if(el.value!==v) el.value=v; }); }
    function etiquetaTexto(){ const e=state.evento; return [`Evento: ${e.nome||'-'}`, `Data: ${fmt.dateBR(e.data)||'-'}${e.hora?` às ${e.hora}`:''}`, `Local: ${e.local||'-'}`, `Endereço: ${e.endereco||'-'}`, `Contato: ${e.anfitriao||'-'}`].join('\n'); }
    function syncEtiqueta(){ const e=state.evento; $$('#etiquetaBar [data-bind]').forEach(el=>{ const k=el.dataset.bind; el.textContent = k==='datahora'? (fmt.dataHora(e)||'—') : k==='fone'? (mask.fone(e.anfitriao)||'—') : (e[k]||'—'); }); paintListaStats(); }
    function syncFromInputs(){ fieldEntries.forEach(([k,el])=>{ state.evento[k]=canonical(el.value); }); persist(); syncEtiqueta(); paintMessages(); paintReport(); }
    fieldEntries.forEach(([k,el])=> el.addEventListener('input', syncFromInputs));

    // ===== Lista =====
    const refs={ listaUl:$('#listaUl'), inputAdd:$('#guestInput'), btnAdd:$('#btnAddGuest'), bulkTa:$('#listaBulk'), outLista:$('#outLista'), listaStats:$('#listaStats') };

    function addGuest(name){ const c=canonical(name); if(!c) return false; const key=keyCI(c); if(!state.convidados.some(n=>keyCI(n)===key)){ state.convidados.push(c); state.convidados.sort((a,b)=>a.localeCompare(b,'pt-BR')); persist(); paintLista(); return true; } return false; }
    function removeGuest(name){ const key=keyCI(name); const i=state.convidados.findIndex(n=>keyCI(n)===key); if(i>=0){ state.convidados.splice(i,1); persist(); paintLista(); } }
    function paintLista(){ if(!refs.listaUl) return; refs.listaUl.innerHTML=''; state.convidados.forEach(n=>{ const li=document.createElement('li'); li.textContent=n; const rm=document.createElement('button'); rm.type='button'; rm.textContent='×'; rm.setAttribute('aria-label','Remover'); rm.addEventListener('click', ()=>removeGuest(n)); li.appendChild(rm); refs.listaUl.appendChild(li); }); if(refs.outLista) refs.outLista.textContent = state.convidados.join('\n'); paintListaStats(); paintReport(); }
    function paintListaStats(){ if(!refs.listaStats) return; const filled=Object.values(state.evento).filter(v=>canonical(v)).length; const pct=Math.round((filled/6)*100); refs.listaStats.textContent=`Andamento: ${isFinite(pct)?pct:0}% • Convidados: ${state.convidados.length}`; $('#rep_andamento').textContent = `${isFinite(pct)?pct:0}%`; $('#rep_total').textContent = String(state.convidados.length); }

    refs.btnAdd?.addEventListener('click', ()=>{ if(addGuest(refs.inputAdd?.value||'')){ if(refs.inputAdd) refs.inputAdd.value=''; } refs.inputAdd?.focus(); });
    refs.inputAdd?.addEventListener('keydown', ev=>{ if(ev.key==='Enter'){ ev.preventDefault(); refs.btnAdd?.click(); } });

    refs.bulkTa?.addEventListener('input', e=>{ const tokens=String(e.target.value).replace(/\r\n?/g,'\n').split(/\n|,|;|\t/g).map(canonical).filter(Boolean); const seen=new Set(); const uniq=[]; for(const t of tokens){ const k=keyCI(t); if(!seen.has(k)){ seen.add(k); uniq.push(t); } } if(refs.outLista) refs.outLista.textContent=uniq.join('\n'); });
    refs.outLista?.addEventListener('dblclick', ()=>{ const lines=String(refs.outLista.textContent||'').split('\n').map(canonical).filter(Boolean); lines.forEach(addGuest); });

    // ===== Mensagens =====
    function genMsgs(){ const e=state.evento; const data = fmt.dateBR(e.data)||'data a definir'; const hora = e.hora||'horário a definir'; return {
      convite: `Olá! Você está convidado(a) para ${e.nome||'nosso evento'} no ${e.local||'local a definir'} (${e.endereco||'endereço a definir'}), em ${data} às ${hora}. Confirme presença respondendo esta mensagem. ${e.anfitriao?`Contato: ${mask.fone(e.anfitriao)}`:''}`.trim(),
      confirm: `Confirmamos sua presença em ${e.nome||'nosso evento'} no dia ${data} às ${hora}. Qualquer dúvida, ${e.anfitriao?`fale com ${e.anfitriao}`:'estamos à disposição'}.`.trim(),
      lembrete: `Lembrete: ${e.nome||'o evento'} acontece em ${data} às ${hora}, no ${e.local||'local informado'}. Te esperamos!`.trim()
    }; }
    function paintMessages(){ const m=genMsgs(); const set=(id,txt)=>{ const el=$(id); if(el && el.value!==txt) el.value=txt; }; set('#msg_convite',m.convite); set('#msg_confirm',m.confirm); set('#msg_lembrete',m.lembrete); }

    $$('[data-copy]').forEach(btn=> btn.addEventListener('click', async ()=>{ const sel = btn.getAttribute('data-copy'); const ta=$(sel); if(!ta) return; try{ await navigator.clipboard.writeText(ta.value); btn.textContent='Copiado!'; setTimeout(()=>btn.textContent = btn.textContent.replace('Copiado!','Copiar').trim()||'Copiar', 800); }catch(_){ const t=document.createElement('textarea'); t.value=ta.value; t.style.position='fixed'; t.style.top='-1000px'; document.body.appendChild(t); t.select(); document.execCommand('copy'); t.remove(); }
    }));

    // ===== Relatório =====
    function paintReport(){ $('#rep_etiqueta').textContent = etiquetaTexto(); $('#rep_json').textContent = JSON.stringify({evento:state.evento, convidados:state.convidados, meta:state.meta}, null, 2); }

    // ===== Arquivo (Abrir/Salvar/Exportações) =====
    let fileHandle=null;
    async function salvarArquivo(handle=fileHandle){ const payload=new Blob([JSON.stringify({evento:state.evento, convidados:state.convidados, meta:state.meta}, null, 2)], {type:'application/json'}); const nomeSug=(state.evento.nome||'evento').toLowerCase().replace(/[^\p{L}\p{N}]+/gu,'-').replace(/-+/g,'-').replace(/^-|-$|^$/g,'')||'evento'; try{ if(handle?.createWritable){ const w=await handle.createWritable(); await w.write(payload); await w.close(); return true; } if('showSaveFilePicker' in window){ const h=await window.showSaveFilePicker({ suggestedName:`${nomeSug}.json`, types:[{description:'Projeto do Assistente Cerimonial', accept:{'application/json':['.json']}}]}); fileHandle=h; return salvarArquivo(h); } }catch(_){ } const url=URL.createObjectURL(payload); const a=document.createElement('a'); a.href=url; a.download=`${nomeSug}.json`; document.body.appendChild(a); a.click(); setTimeout(()=>{URL.revokeObjectURL(url); a.remove();},0); return true; }
    async function abrirArquivo(){ if('showOpenFilePicker' in window){ try{ const [h]=await window.showOpenFilePicker({ types:[{description:'Projeto do Assistente Cerimonial', accept:{'application/json':['.json']}}]}); fileHandle=h; const f=await h.getFile(); const json=JSON.parse(await f.text()); carregarEstado(json); return true; }catch(_){ return false; } } return new Promise(resolve=>{ const inp=document.createElement('input'); inp.type='file'; inp.accept='application/json'; inp.addEventListener('change', async ()=>{ const f=inp.files?.[0]; if(!f) return resolve(false); try{ const json=JSON.parse(await f.text()); carregarEstado(json); resolve(true); }catch(_){ resolve(false);} }, {once:true}); inp.click(); }); }
    function carregarEstado(json){ try{ if(json?.evento && typeof json.evento==='object') Object.assign(state.evento, json.evento); if(Array.isArray(json?.convidados)) state.convidados = Array.from(new Set(json.convidados.map(canonical).filter(Boolean))); state.convidados.sort((a,b)=>a.localeCompare(b,'pt-BR')); persist(); paintInputs(); syncEtiqueta(); paintLista(); paintMessages(); paintReport(); }catch(_){ } }

    async function copyEtiqueta(){ const txt=etiquetaTexto(); try{ await navigator.clipboard.writeText(txt); }catch(_){ const ta=document.createElement('textarea'); ta.value=txt; ta.style.position='fixed'; ta.style.top='-1000px'; document.body.appendChild(ta); ta.select(); document.execCommand('copy'); ta.remove(); } }
    function downloadEtiqueta(){ const blob=new Blob([etiquetaTexto()],{type:'text/plain;charset=utf-8'}); const url=URL.createObjectURL(blob); const a=document.createElement('a'); a.href=url; a.download='etiqueta.txt'; document.body.appendChild(a); a.click(); setTimeout(()=>{URL.revokeObjectURL(url); a.remove();},0); }
    function exportCSV(){ const rows=[['nome']].concat(state.convidados.map(n=>[n])); const csv=rows.map(r=>r.map(v=>{ const s=String(v??''); return /[",;\n]/.test(s) ? `"${s.replace(/"/g,'""')}"` : s; }).join(';')).join('\n'); const blob=new Blob(["\uFEFF"+csv],{type:'text/csv;charset=utf-8'}); const url=URL.createObjectURL(blob); const a=document.createElement('a'); a.href=url; a.download='convidados.csv'; document.body.appendChild(a); a.click(); setTimeout(()=>{URL.revokeObjectURL(url); a.remove();},0); }
    function imprimirPDF(){ window.print(); }

    // ===== Botões toolbar =====
    $('#btnIniciar')?.addEventListener('click', ()=>{ syncFromInputs(); if('showSaveFilePicker' in window){ salvarArquivo(); } });
    $('#btnAbrir')?.addEventListener('click', abrirArquivo);
    $('#btnSalvar')?.addEventListener('click', ()=>salvarArquivo());
    $('#btnExportarPDF')?.addEventListener('click', imprimirPDF);
    $('#btnCopiaEtiqueta')?.addEventListener('click', copyEtiqueta);
    $('#btnBaixaEtiqueta')?.addEventListener('click', downloadEtiqueta);
    $('#btnExportaCSV')?.addEventListener('click', exportCSV);

    // ===== Exemplo rápido =====
    $('#btnExemplo')?.addEventListener('click', ()=>{
      Object.assign(state.evento, { nome:'Casamento Ana & Marco', data:'2025-12-20', hora:'19:30', local:'Espaço Jardins', endereco:'Rua das Palmeiras, 123 – Curitiba', anfitriao:'Ana (41) 99999-0000' });
      state.convidados = ['João Silva','Maria Souza','Pedro Santos','Clara Lima'];
      persist(); paintInputs(); syncEtiqueta(); paintLista(); paintMessages(); paintReport();
    });

    // ===== Inicialização =====
    paintInputs(); syncEtiqueta(); paintLista(); paintMessages(); paintReport();
    showScreen(location.hash||'#dados');

    // Expor API (útil para testes) – opcional
    window.appCerimonialV3 = { state, addGuest, removeGuest, abrirArquivo, salvarArquivo };
  })();
  </script>
</body>
</html>
